<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>java面试题</title>
    <link href="/2022/06/29/java/"/>
    <url>/2022/06/29/java/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1.JDK 和 JRE 有什么区别？"></a>1.JDK 和 JRE 有什么区别？</h2><p>jdk包含了jre</p><p>jdk是开发工具包，提供了运行环境</p><p>jre是运行环境</p><h2 id="2-x3D-x3D-和equals的区别是什么？"><a href="#2-x3D-x3D-和equals的区别是什么？" class="headerlink" title="2.&#x3D;&#x3D;和equals的区别是什么？"></a>2.&#x3D;&#x3D;和equals的区别是什么？</h2><p>&#x3D;&#x3D;是关系运算符，equals()是方法，结果都返回布尔值。</p><p>Object中的&#x3D;&#x3D;和equals比较的都是地址，作用相同。</p><p>&#x3D;&#x3D;：基本类型中比较值是否相等，引用类型中比较内存地址值是否相等</p><p>equals：一般已经重写了equals方法，比较的是内容。</p><h2 id="3-如何将字符串反转？"><a href="#3-如何将字符串反转？" class="headerlink" title="3.如何将字符串反转？"></a>3.如何将字符串反转？</h2><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><h2 id="4-hashCode-与-equals-重要-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？hashCode和equals方法的关系"><a href="#4-hashCode-与-equals-重要-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？hashCode和equals方法的关系" class="headerlink" title="4.hashCode 与 equals (重要)          ||        两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？hashCode和equals方法的关系"></a>4.hashCode 与 equals (重要)          ||        两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？hashCode和equals方法的关系</h2><p>hashCode() 的作用是获取哈希码，这个哈希码的作用是确定该对象在哈希表中的索引位置。</p><p>如果两个对象相等，则hashcode一定也是相同的，而且对两个对象分别调用equals方法都返回true </p><p>两个对象有相同的hashcode值，它们也不一定是相等的</p><h2 id="5-final"><a href="#5-final" class="headerlink" title="5.final"></a>5.final</h2><p>final 最终的，修饰类，方法和变量，final修饰的类不能被继承，修饰的方法不能重写，但是能重载。修饰的成员变量必须初始化，赋值后不能重新赋值。</p><h2 id="6-八大基本数据类型、转换规则"><a href="#6-八大基本数据类型、转换规则" class="headerlink" title="6.八大基本数据类型、转换规则"></a>6.八大基本数据类型、转换规则</h2><p>byte short int long float double char boolean</p><p>低级可以自动向高级转换、高级需要强制转换称为低级，但可能会丢失精度。</p><h2 id="7-抽象类和接口有什么区别"><a href="#7-抽象类和接口有什么区别" class="headerlink" title="7.抽象类和接口有什么区别"></a>7.抽象类和接口有什么区别</h2><p>抽象类可以有构造方法，接口不能有构造方法</p><p>抽象类可以有普通成员变量，接口中没有普通成员变量</p><p>抽象类可以包含非抽象方法，接口中都是抽象方法</p><p>抽象类中抽象方法访问权限可以是public，protected，default，接口中默认是 public abstract</p><h2 id="9-普通类和抽象类有什么区别？"><a href="#9-普通类和抽象类有什么区别？" class="headerlink" title="9.普通类和抽象类有什么区别？"></a>9.普通类和抽象类有什么区别？</h2><p>抽象类不能被实例化</p><p>抽象类可以有抽象方法，只需声明，无需实现</p><p>抽象类的子类必须实现抽象类中的所有抽象方法、否则这个子类也是抽象类</p><p>抽象方法不能被声明为静态  不能被private、final修饰    (为什么不能被final修饰?因为抽象类是被用于继承的，final修饰代表不可修改，不可继承)</p><h2 id="8-Java访问修饰符有哪些？权限的区别？"><a href="#8-Java访问修饰符有哪些？权限的区别？" class="headerlink" title="8.Java访问修饰符有哪些？权限的区别？"></a>8.Java访问修饰符有哪些？权限的区别？</h2><p>public当前类可以访问、同一个包下可以访问、子孙类可以访问、其他包可以访问</p><p>protected 当前类可以访问、同一个包下可以访问、子孙类可以访问、其他包不可以访问</p><p>default当前类可以访问、同一个包可以访问、子孙类不可以访问、其他包不可以访问</p><p>private当前类可以访问、同一个包不可以访问、子孙类不可以访问、其他包不可以访问</p><h2 id="11-方法重载和重写是什么，有什么区别？"><a href="#11-方法重载和重写是什么，有什么区别？" class="headerlink" title="11.方法重载和重写是什么，有什么区别？"></a>11.方法重载和重写是什么，有什么区别？</h2><p>重写发生在子类继承父类，参数列表相同，方法名相同   访问权限只能从小范围到大范围</p><p>重载 一个类里 同名不同参数</p><h2 id="12-instanceof关键字的作用是什么？"><a href="#12-instanceof关键字的作用是什么？" class="headerlink" title="12.instanceof关键字的作用是什么？"></a>12.instanceof关键字的作用是什么？</h2><p>用来在运行时判断对象是否是指定 类及其父类的一个实例</p><p>比较的是对象，不能比较基本类型</p><h2 id="13-类和对象的关系"><a href="#13-类和对象的关系" class="headerlink" title="13.类和对象的关系"></a>13.类和对象的关系</h2><p>Emp  emp &#x3D; new Emp();</p><p>.类是对象的抽象，对象是类的具体实例</p><p>类是抽象的，不占内存，对象是具体的，占内存</p><h2 id="14-static关键字的作用是什么？"><a href="#14-static关键字的作用是什么？" class="headerlink" title="14.static关键字的作用是什么？"></a>14.static关键字的作用是什么？</h2><p>static可以修饰成员变量，方法，代码块和内部类</p><p>可以通过创建的对象名.属性名  和类名.属性名 两种方式访问</p><p>static代码块 在类被第一次加载时执行静态代码块，且只被执行一次。</p><h2 id="15-abstract关键字的作用？"><a href="#15-abstract关键字的作用？" class="headerlink" title="15.abstract关键字的作用？"></a>15.abstract关键字的作用？</h2><p>可以修饰类和方法、不能修饰属性和构造方法</p><p>abstract修饰的类 是抽象类，需要被继承</p><p>abstract修饰的方法是抽象方法，需要子类被重写</p><h2 id="16-this和super关键字的作用"><a href="#16-this和super关键字的作用" class="headerlink" title="16.this和super关键字的作用"></a>16.this和super关键字的作用</h2><p>this <strong>对象内部指代自身的引用</strong>，可以理解为指向对象本身的一个指针</p><p>super代表对<strong>当前对象的直接父类对象的引用</strong>，可以理解为是指向自己父类对象的一个指针</p><h2 id="17-java数组有什么特征？创建数组"><a href="#17-java数组有什么特征？创建数组" class="headerlink" title="17.java数组有什么特征？创建数组"></a>17.java数组有什么特征？<strong>创建数组</strong></h2><p>数组下标从0开始</p><p>每个数组元素都有默认值，基本类型的默认值为0 0.0 false 引用类型的默认值为null</p><p>数组的类型只能是一个，而且固定，在声明时确定，数组的长度一旦确定，无法改变。</p><p> int[] 数组名 &#x3D;{数组内的参数，用逗号隔开}</p><p>int [] 数组名 &#x3D; new int[数组长度];这里要注意使用适当长度的数组</p><p>int 数组名[] &#x3D; new int[]{数组内的参数，用逗号隔开}; </p><h2 id="18-什么是包装类，为什么要有包装类，基本数据类型怎么和包装类进行转换"><a href="#18-什么是包装类，为什么要有包装类，基本数据类型怎么和包装类进行转换" class="headerlink" title="18.什么是包装类，为什么要有包装类，基本数据类型怎么和包装类进行转换"></a>18.什么是包装类，为什么要有包装类，基本数据类型怎么和包装类进行转换</h2><p>Byte Boolean Short Character Integer Long Float Double</p><p>提供很多方法如 parseInt   toHexString</p><p>基本—-》包装 ： new 包装类</p><p>包装——》基本  xxxValue()</p><h2 id="19-java中操作字符串都有哪些类？分别有什么区别？-String、StringBuffer、StringBuilder"><a href="#19-java中操作字符串都有哪些类？分别有什么区别？-String、StringBuffer、StringBuilder" class="headerlink" title="19.java中操作字符串都有哪些类？分别有什么区别？             String、StringBuffer、StringBuilder"></a>19.java中操作字符串都有哪些类？分别有什么区别？             <strong>String、</strong>StringBuffer<strong>、</strong>StringBuilder</h2><p>String是final修饰的，不可变，每次操作都会产生新的String对象</p><p>StringBuffer和StringBuilder都是在原对象上操作</p><p>StringBuffer是线程安全的  多线程操作字符串缓冲区下操作大量数据  |||||||||||    StringBuilder线程不安全的  单线程操作字符串缓冲区下操作大量数据</p><p>性能：StringBuilder &gt; StringBuffer &gt; String</p><h2 id="20-String-类的常用方法都有哪些？"><a href="#20-String-类的常用方法都有哪些？" class="headerlink" title="20.String 类的常用方法都有哪些？"></a>20.String 类的常用方法都有哪些？</h2><p>indexOf()：返回指定字符的索引。<br>charAt()：返回指定索引处的字符。<br>replace()：字符串替换。<br>trim()：去除字符串两端空白。<br>split()：分割字符串，返回一个分割后的字符串数组。<br>getBytes()：返回字符串的 byte 类型数组。<br>length()：返回字符串长度。<br>toLowerCase()：将字符串转成小写字母。<br>toUpperCase()：将字符串转成大写字母。<br>substring()：截取字符串。<br>equals()：字符串比较。</p><h2 id="21-说一说你对面向过程和面向对象的理解"><a href="#21-说一说你对面向过程和面向对象的理解" class="headerlink" title="21.说一说你对面向过程和面向对象的理解"></a>21.说一说你对面向过程和面向对象的理解</h2><p>面向对象相对于面向过程来说，是两种不同处理问题的角度，</p><p>面向过程更注重事情的每一个步骤和顺序，面向对象更注重事情有哪些对象，以及对象都需要做什么</p><p>比如洗衣机和洗衣服</p><p>面向过程会将任务拆解为一系列的步骤：打开洗衣机—–》放衣服—–》放洗衣液—–》清洗—–》烘干</p><p>而面向对象会拆分为人和洗衣机：人：需要 打开洗衣机 放衣服 放洗衣液</p><p>​洗衣机： 清洗  烘干</p><p>面向过程比较直接高效，面向对象更易于复用、扩展和维护。</p><p>例子：洗衣机和洗衣服</p><h2 id="22-面向对象的三大特性-封装-继承-多态"><a href="#22-面向对象的三大特性-封装-继承-多态" class="headerlink" title="22.面向对象的三大特性  封装  继承  多态"></a>22.面向对象的三大特性  封装  继承  多态</h2><p>封装：尽可能隐藏对象的内部实现细节，控制对象的修改及访问的权限：就是<strong>属性私有化，增强数据安全性</strong></p><p>继承：子类继承父类，子类可以重写父类中的方法，可以继承父类的属性，私有的属性和方法不可以继承</p><p>多态：多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>​          指允许不同类的对象对同一消息做出的响应，即同一消息可以根据发送对象的不同而采用多种不同的行为方式。</p><p>Java实现多态有三个必要条件：继承、重写、向上转型。</p><h2 id="23-向上转型"><a href="#23-向上转型" class="headerlink" title="23.向上转型"></a>23.向上转型</h2><p>格式：父类名称 对象名 &#x3D; new 子类名称();       </p><p>含义：右侧创建一个子类对象，把它当作父类来使用。      </p><p>注意：向上转型一定是安全的。      </p><p>缺点：一旦向上转型，子类中原本特有的方法就不能再被调用了。</p><h2 id="24-amp-和-amp-amp-的区别"><a href="#24-amp-和-amp-amp-的区别" class="headerlink" title="24.&amp;和&amp;&amp;的区别"></a>24.&amp;和&amp;&amp;的区别</h2><p>&amp;运算符有两种用法：(1)按位与；(2)逻辑与。</p><p>&amp;&amp;运算符是短路与运算。逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true 整个表达式的值才是 true。&amp;&amp;之所以称为短路运算，是因为如果&amp;&amp;左边的表达式的值是 false，右边的表达式会被直接短路掉，不会进行运算。</p><h2 id="25-反射"><a href="#25-反射" class="headerlink" title="25.反射"></a>25.反射</h2><p>什么是反射机制？<br><strong>JAVA反射机制是在运行状态中，</strong></p><p><strong>对于任意一个类，都能够知道这个类的所有属性和方法；</strong></p><p><strong>对于任意一个对象，都能够调用它的任意一个方法和属性；</strong></p><p>这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><p>静态编译和动态编译</p><p><strong>静态编译：</strong>在编译时确定类型，绑定对象<br><strong>动态编译：</strong>运行时确定类型，绑定对象<br><strong>反射机制优缺点</strong><br>优点： 运行期类型的判断，动态加载类，提高代码灵活度。<br>缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的java代码要慢很多。<br>反射机制的应用场景有哪些？<br>反射是框架设计的灵魂。</p><p>举例：①我们在使用JDBC连接数据库时使用Class.forName()通过反射加载数据库的驱动程序；②Spring框架也用到很多反射机制，最经典的就是xml的配置模式。Spring 通过 XML 配置模式装载 Bean 的过程：1) 将程序内所有 XML 或 Properties 配置文件加载入内存中; 2)Java类里面解析xml或properties里面的内容，得到对应实体类的字节码字符串以及相关的属性信息; 3)使用反射机制，根据这个字符串获得某个类的Class实例; 4)动态配置实例的属性</p><h2 id="26-Java获取反射的三种方法"><a href="#26-Java获取反射的三种方法" class="headerlink" title="26.Java获取反射的三种方法"></a>26.Java获取反射的三种方法</h2><p>1.通过new对象实现反射机制 2.通过路径实现反射机制 3.通过类名实现反射机制</p><h2 id="27-java序列化？"><a href="#27-java序列化？" class="headerlink" title="27.java序列化？"></a>27.java序列化？</h2><p><strong>将 Java 对象转换成字节流的过程。</strong></p><p>反序列化：将字节流转换成 Java 对象的过程。</p><p>当 Java 对象需要在网络上传输 或者 持久化存储到文件中时，就需要对 Java 对象进行序列化处理。</p><p>注意事项：</p><p>某个类可以被序列化，则其子类也可以被序列化<br>声明为 static 和 transient 的成员变量，不能被序列化。static 成员变量是描述类级别的属性，transient 表示临时数据<br>反序列化读取序列化对象的顺序要保持一致</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第一个模块</title>
    <link href="/2022/06/29/my-first-post/"/>
    <url>/2022/06/29/my-first-post/</url>
    
    <content type="html"><![CDATA[<p>1.这是我创建的第一个模块内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/28/hello-world/"/>
    <url>/2022/06/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
